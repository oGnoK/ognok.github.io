[{"title":"持久化框架--Mybatis的xml中到底有什么？","date":"2023-12-17T06:59:02.000Z","url":"/2023/12/17/mybatis/","tags":[["Java","/tags/Java/"],["Mybatis","/tags/Mybatis/"]],"categories":[[" ",""]],"content":"MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。 在SpringBoot框架的基础之上导入相关启动器依赖 在 application.yml中简单配置数据库地址池与Mybatis 创建实体类 mapper接口创建 在resources下创建Mapper.StudentMapper.xml文件导入Mybatis头文件 书写标签，namespace用于绑定Mapper的接口 结果映射将结果映射给Java对象 标签详细介绍resultMap标签用于定义结果映射规则，将查询结果映射到Java对象。其常用属性如下： id：标识符，用于在配置文件中引用该结果映射规则。映射数据表的主键ID， type：指定映射结果的Java类型。 result：标识符，用于在配置文件中引用该结果映射规则。注入到字段或 JavaBean 属性的结果 property：column 指定的列进行映射的 JavaBean 变量名称。（Java实体类字段名） column：用来指定我们需要将那一列进行和 JavaBean 属性映射。(数据库字段名) 添加基本的sql操作 标签详细介绍 &lt;select&gt;：插入操作的标签 &lt;update&gt;：更新操作的标签 &lt;delete&gt;：删除操作的标签 &lt;select&gt;：查询操作的标签 id：与Mapper方法名对应，使用此id调用SQL语句 resultType：指定 SQL 语句执行后返回的结果类型，Java对象或者基本数据类型 parameterType：删除操作的标签 #{}与${}的区别 #{}：占位符， 可以防止 SQL 注入攻击，并且会自动进行参数类型转换和字符转义，相对安全。#{} 在执行前会被预编译成一个占位符，MyBatis 会将 SQL 语句中的 #{} 部分替换为问号（?）,然后将参数值通过 PreparedStatement （ Java 中用于执行预编译 SQL 语句的接口，它可以确保参数值被安全地传递给数据库，并且不会受到恶意输入的影响）的方式绑定到这些问号上。它可以确保参数值被安全地传递给数据库，因此可以防止 SQL 注入。 ${}：字符串替换，在 SQL 语句中使用 ${} 会直接将参数的值拼接到 SQL 语句中，存在 SQL 注入的风险。 一对一映射一实体对应一实体相关联。 改动下原来的实体类，并添加子映射实体类 创建新的Mapper接口 使用LEFT JOIN将student与id_card表进行关联，使用字段id将其关联，将select标签内查询出来的数据通过resultMap处理映射，使用resultMap进行指定。 Tip查询到的数据会映射到相应的实体类，此时，Student中除原本属性外idCard中的数据将Set到IdCard对象中，”一对象“对应另一个对象中的”其中一组数据 一对多映射一实体对应一实体多条数据，甚至多个实体多条记录 改动原实体类 Student中添加了LIst&lt;&gt;属性，它代表学生与学生证、学生与教师与之间的一对多关系。 添加新的实体类Teacher 使用student_id将三张表进行关联，student表映射到Student类，idCard映射到idCardList中，teacher映射到teacherList中，实现一实体对应多个实体的关系 association与collection标签注意我分别使用了association与collection它们在两个不同的内对应id分别为resultMapIdOne与resultMapIdTwo 两个元素都用于处理关联关系 动态拼接与格式化标签在resultMapIdOne映射基础上对基本语句进行调整，添加Mybatis标签使用 改动mapper接口,改变insertName接收 标签详细介绍 if：判断是否要添加相应的语句。 choose：类似if判断，搭配when与otherwisse使用，当所有when条件都不成立&#x2F;不符合时，使用otherwise，所有when条件只会执行一次 foreach：动态生成 SQL 语句，用于遍历集合生成Sql片段， 内部标签结构： collection: 遍历的集合或数组的名称。对应Mapper传递参数名 item: 集合中的每个元素在循环中的别名。 index（可选）: 当遍历的是 Map 时，表示 Map 的键。 open: 遍历开始时的字符串。 close: 遍历结束时的字符串。 separator: 每个元素之间的分隔符，注意：控制的是在每两个元素之间插入的分隔符。对于最后一个元素，不会在其后添加分隔符。 where：用于在 SQL 查询中动态生成 WHERE 子句。 set：用于 UPDATE 语句中，用于动态生成 SET 子句 trim：定制 SQL 语句的前缀、后缀，以及连接条件。它可以用于处理动态 SQL 语句的前缀和后缀。 内部标签结构： prefix：字符串开头添加的前缀。 prefixOverrides：字符串开头删除的前缀。 suffix：字符串结尾添加的后缀。 suffixOverrides：字符串结尾删除的后缀。 标签补充 sql：定义SQL的常量。 include ：用于引用sql标签定义的常量 以此查询条件为例进行改动 结语希望和朋友们一起学习、一起进步"},{"title":"Java 正则表达式","date":"2023-10-26T07:28:25.000Z","url":"/2023/10/26/javaregular/","tags":[["Java","/tags/Java/"]],"categories":[[" ",""]],"content":"Java中的正则表达式可以用于匹配、查找和替换字符串的表达式，它可以帮助我们在一个文本中快速找到符合特定模式的字符串。 Java中正则表达式的基本格式： 创建一个简单的正则表达式的步骤： 创建一个简单的String字符串，使用Pattern类的compile方法创建了一个Pattern对象，并将模式作为参数传递给它。接下来，我们使用Matcher类的matcher方法创建了一个Matcher对象，并将要匹配的字符串作为参数传递给它。最后，我们使用Matcher类的find方法进行匹配操作，并使用group方法获取匹配到的结果。 关于Pattern类与Matcher类Pattern类提供了一组方法来编译和解释正则表达式，并对其进行匹配和搜索。其中一些方法包括： Matcher类则提供了一组方法来执行正则表达式的匹配和搜索。其中一些方法包括： \\与+\\d匹配单个数字字符。而\\d+中的+表示匹配一个或多个前面的元素，也就是匹配一个或多个数字字符。在Java中，\\是一个转义字符，用于转义其他字符的含义，例如\\n表示换行符。因此，如果要在正则表达式中使用\\，需要使用\\来转义它本身的含义，以表示一个普通的反斜杠字符。因此，在Java正则表达式中，如果想匹配一个或多个数字字符，应该使用\\d+的格式。 "},{"title":"为CentOS7.X升级内核","date":"2023-09-27T00:45:38.000Z","url":"/2023/09/27/upgradekernel/","tags":[["Linux","/tags/Linux/"],["CentOS","/tags/CentOS/"],["Kernel","/tags/Kernel/"]],"categories":[[" ",""]],"content":"CentOS 7.X默认自带的的内核版本为3.X，将原默认内核进行替换提高 更新yum源仓库 配置ELRepo Project官方的安装说明 导入ELRepo public key 安装ELRepo仓库的yum源 查看可用的系统内核包 Kernel ml VS Kernel ltELRepo 中有 2 个内核。一个称为 kernel-lt，另一个称为 kernel-ml。这两者之间的区别是，kernel-lt 软件包提供最新 Linux 内核的长期支持版本，而 kernel-ml 软件包提供最新 Linux 内核的主线稳定版本。 kernel-ml 提供的内核比 kernel-lt 更新更多。这两个内核都是安全的。 安装最新版本内核安装最新lt版本 安装最新ml版本 查看已安装的内核 查看系统可用内核 设置新内核为默认内核从上往下是0开始数，应用第0位可用内核 重启并验证 "},{"title":"本地安装Mysql服务8.0","date":"2023-09-24T08:21:42.000Z","url":"/2023/09/24/mysql/","tags":[["Mysql","/tags/Mysql/"]],"categories":[[" ",""]],"content":"Windows下安装Mysql服务，并释放远程或局域网访问权限 下载Mysql文件 官网下载地址入口 解压并创建创建my.ini文件 在zip根目录下创建my.ini文件 内容如下: 初始化数据库以管理员身份运行 cmd，在 MySQL 安装目录的 bin 目录下执行命令： 注意留意cmd信息内容，留意root@localhost：***；此为默认root用户密码，注意保留以便登录 安装mysqld –install [服务名] 启动Msql服务 登录Mysql mysql -u root -p 第一次登陆，输入初始化时的密码 修改用户密码 修改localhost密码 刷新权限 远程或局域网访问以上步骤完成可在本地使用Mysql服务，只释放了localhost，如需远程或局域网访问，执行以下步骤 释放远程或局域网访问选择数据库 mysql 数据库的root 用户的相关信息 此时看到host项为localhost 授权 root 用户的所有权限并设置远程访问 GRANT ALL ON 表示所有权限，% 表示通配所有 host，可以访问远程。 如果看到以下错误: 输入以下命令 刷新权限 再次查看mysql 数据库的root 用户的相关信息 "},{"title":"WSL默认安装位置","date":"2023-09-24T08:09:32.000Z","url":"/2023/09/24/ubuntuwsl/","tags":[["Linux","/tags/Linux/"],["Ubuntu","/tags/Ubuntu/"]],"categories":[[" ",""]],"content":"Windows系统的Linux子系统WSL(Windows Subsystem for Linux)修改默认安装目录到其他盘 修改Ubuntu安装位置查看当前Ubuntu版本信息 打包子系统到d盘命名为xxx.tar，如：Ubuntu-20.04.tar 卸载当前Ubuntu版本 将d盘下的Ubuntu-20.04.tar加载到f盘下的Ubuntu-20.04文件夹下 "},{"title":"Java开发环境配置","date":"2023-09-24T07:05:52.000Z","url":"/2023/09/24/javapath/","tags":[["Java","/tags/Java/"],["Path","/tags/Path/"]],"categories":[[" ",""]],"content":"如何搭建Java的开发环境PATH Java的开发环境PATH 编辑Path添加%JAVA_HOME%\\bin "},{"title":"Start, Aosp build","date":"2023-09-24T03:30:43.000Z","url":"/2023/09/24/aospbuild/","tags":[["Android","/tags/Android/"]],"categories":[[" ",""]],"content":"AOSP(Android Open Source Project)，Android开放源代码项目，开放源代码项目(AOSP)，由谷歌发起。开始–Aosp的环境与构建 安装构建依赖包 Repo与git（清华源） 同步源码 为Git-repo设置代理 取消Git代理"},{"title":"categories","date":"2023-08-23T03:46:30.000Z","url":"/categories/index.html","categories":[[" ",""]]},{"title":"Page","date":"2023-08-23T05:55:45.000Z","url":"/page/index.html","categories":[[" ",""]]},{"title":"Links","date":"2023-08-23T03:44:54.000Z","url":"/friends/index.html","categories":[[" ",""]]},{"title":"Search","date":"2023-08-23T03:25:30.000Z","url":"/search/index.html","categories":[[" ",""]]},{"title":"Tags","date":"2023-08-23T03:20:30.000Z","url":"/tags/index.html","categories":[[" ",""]]}]